pipeline {
    agent {
        docker {
            image 'bitnami/kubectl:latest'  // ‚úÖ Updated to a working kubectl image
            args '-u root:root'  // ‚úÖ Ensures proper permissions (optional)
        }
    }

    environment {
        KUBECONFIG = credentials('kubeconfig-credentials-id')  // ‚úÖ Uses Jenkins credentials
        K8S_NAMESPACE = 'default'  // ‚úÖ Customize if needed
    }

    stages {
        stage('Deploy to Kubernetes') {
            steps {
                script {
                    echo "üöÄ Deploying application to Kubernetes..."

                    // ‚úÖ Check kubectl version (for debugging)
                    sh 'kubectl version --client'

                    // ‚úÖ Apply Kubernetes manifests (with error handling)
                    sh '''
                        set +e  # Allow failures (to handle missing ingress.yml)
                        kubectl apply -f k8s/deployment.yml -n $K8S_NAMESPACE
                        kubectl apply -f k8s/service.yml -n $K8S_NAMESPACE
                        kubectl apply -f k8s/ingress.yml -n $K8S_NAMESPACE || echo "‚ÑπÔ∏è No ingress.yml found"
                        set -e  # Re-enable strict error checking
                    '''

                    // ‚úÖ Wait for rollout to complete (with timeout)
                    sh 'kubectl rollout status deployment/eureka-server -n $K8S_NAMESPACE --timeout=120s'
                }
            }
        }
    }

    post {
        failure {
            echo "‚ùå Deployment failed! Check logs."
            // ‚úÖ Optional: Send Slack/email notification
        }
        success {
            echo "‚úÖ Deployment succeeded!"
        }
    }
}