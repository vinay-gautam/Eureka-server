pipeline {
    agent any

    environment {
        K8S_NAMESPACE = 'default'
        // Default fallback IP if minikube command fails
        MINIKUBE_IP = '192.168.49.2' 
    }

    stages {
        stage('Get Minikube IP') {
            steps {
                script {
                    // Try to get IP from host machine's Docker network
                    try {
                        env.MINIKUBE_IP = sh(
                            script: 'docker network inspect minikube --format "{{range .IPAM.Config}}{{.Gateway}}{{end}}"',
                            returnStdout: true
                        ).trim()
                    } catch(Exception e) {
                        echo "‚ö†Ô∏è Using default Minikube IP: ${env.MINIKUBE_IP}"
                    }
                }
            }
        }

        stage('Deploy to Kubernetes') {
            steps {
                script {
                    def kubectlImage = docker.image('alpine/k8s:1.26.10')
                    
                    echo "üöÄ Deploying application to Kubernetes (Minikube IP: ${env.MINIKUBE_IP})..."

                    withCredentials([
                        file(credentialsId: 'kubeconfig-credentials-id', variable: 'KUBECONFIG_FILE'),
                        file(credentialsId: 'minikube-ca', variable: 'MINIKUBE_CA'),
                        file(credentialsId: 'minikube-cert', variable: 'MINIKUBE_CERT'),
                        file(credentialsId: 'minikube-key', variable: 'MINIKUBE_KEY')
                    ]) {
                        kubectlImage.inside("--entrypoint=\"\" -u root:root -v /var/run/docker.sock:/var/run/docker.sock --add-host=minikube:${env.MINIKUBE_IP}") {
                            sh '''
                                mkdir -p /minikube
                                cp $KUBECONFIG_FILE /minikube/kubeconfig
                                cp $MINIKUBE_CA /minikube/ca.crt
                                cp $MINIKUBE_CERT /minikube/client.crt
                                cp $MINIKUBE_KEY /minikube/client.key
                                sed -i 's|server: .*|server: https://minikube:8443|g' /minikube/kubeconfig
                                sed -i 's|C:\\\\Users\\\\.*\\\\minikube|/minikube|g' /minikube/kubeconfig
                                export KUBECONFIG=/minikube/kubeconfig
                                
                                echo "=== kubeconfig ==="
                                cat /minikube/kubeconfig
                            '''

                            sh 'kubectl version --client'
                            sh 'kubectl cluster-info'

                            sh '''
                                set +e
                                kubectl apply -f k8s/deployment.yml -n $K8S_NAMESPACE
                                kubectl apply -f k8s/service.yml -n $K8S_NAMESPACE
                                kubectl apply -f k8s/ingress.yml -n $K8S_NAMESPACE || echo "‚ÑπÔ∏è No ingress.yml found"
                                set -e
                                
                                kubectl rollout status deployment/eureka-server -n $K8S_NAMESPACE --timeout=120s
                            '''
                        }
                    }
                }
            }
        }
    }

    post {
        failure {
            echo "‚ùå Deployment failed! Check logs."
            sh '''
                echo "=== Debug Info ==="
                kubectl config view || true
                kubectl get nodes || true
            '''
        }
        success {
            echo "‚úÖ Deployment succeeded!"
        }
    }
}