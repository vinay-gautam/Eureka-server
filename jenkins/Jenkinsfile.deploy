pipeline {
    agent any

    environment {
        K8S_NAMESPACE = 'default'
    }

    stages {
        stage('Deploy to Kubernetes') {
            steps {
                script {
                    def kubectlImage = docker.image('bitnami/kubectl:latest')

                    echo "üöÄ Deploying application to Kubernetes..."

                    withCredentials([file(credentialsId: 'kubeconfig-credentials-id', variable: 'KUBECONFIG')]) {
                        kubectlImage.inside('--entrypoint="" -u root:root') {
                            sh 'kubectl version --client'

                            sh '''
                                set +e
                                kubectl apply -f k8s/deployment.yml -n $K8S_NAMESPACE
                                kubectl apply -f k8s/service.yml -n $K8S_NAMESPACE
                                kubectl apply -f k8s/ingress.yml -n $K8S_NAMESPACE || echo "‚ÑπÔ∏è No ingress.yml found"
                                set -e
                            '''

                            sh 'kubectl rollout status deployment/eureka-server -n $K8S_NAMESPACE --timeout=120s'
                        }
                    }
                }
            }
        }
    }

    post {
        failure {
            echo "‚ùå Deployment failed! Check logs."
        }
        success {
            echo "‚úÖ Deployment succeeded!"
        }
    }
}
