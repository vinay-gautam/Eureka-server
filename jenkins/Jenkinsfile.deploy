pipeline {
    agent any

    environment {
        K8S_NAMESPACE = 'default'
    }

    stages {
        stage('Deploy to Kubernetes') {
            steps {
                script {
                    // Use alpine/k8s image instead (more reliable than bitnami)
                    def kubectlImage = docker.image('alpine/k8s:1.26.10') 
                    
                    echo "üöÄ Deploying application to Kubernetes..."

                    withCredentials([
                        file(credentialsId: 'kubeconfig-credentials-id', variable: 'KUBECONFIG_FILE'),
                        file(credentialsId: 'minikube-ca', variable: 'MINIKUBE_CA'),
                        file(credentialsId: 'minikube-cert', variable: 'MINIKUBE_CERT'),
                        file(credentialsId: 'minikube-key', variable: 'MINIKUBE_KEY')
                    ]) {
                        kubectlImage.inside('--entrypoint="" -u root:root -v /var/run/docker.sock:/var/run/docker.sock') {
                            // Set up proper kubeconfig with corrected paths
                            sh '''
                                mkdir -p /minikube
                                cp $KUBECONFIG_FILE /minikube/kubeconfig
                                cp $MINIKUBE_CA /minikube/ca.crt
                                cp $MINIKUBE_CERT /minikube/client.crt
                                cp $MINIKUBE_KEY /minikube/client.key
                                sed -i 's|C:\\\\Users\\\\.*\\\\minikube|/minikube|g' /minikube/kubeconfig
                                export KUBECONFIG=/minikube/kubeconfig
                            '''

                            sh 'kubectl version --client'
                            sh 'kubectl cluster-info'

                            sh '''
                                set +e
                                kubectl apply -f k8s/deployment.yml -n $K8S_NAMESPACE
                                kubectl apply -f k8s/service.yml -n $K8S_NAMESPACE
                                kubectl apply -f k8s/ingress.yml -n $K8S_NAMESPACE || echo "‚ÑπÔ∏è No ingress.yml found"
                                set -e
                                
                                kubectl rollout status deployment/eureka-server -n $K8S_NAMESPACE --timeout=120s
                            '''
                        }
                    }
                }
            }
        }
    }

    post {
        failure {
            echo "‚ùå Deployment failed! Check logs."
        }
        success {
            echo "‚úÖ Deployment succeeded!"
        }
    }
}